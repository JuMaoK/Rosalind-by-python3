'''
Title: Reversal Distance
URL: http://rosalind.info/problems/rear/

Given: A collection of at most 5 pairs of permutations, all of which have length 10.
Return: The reversal distance between each permutation pair.

Sample:
1 2 3 4 5 6 7 8 9 10
3 1 5 2 7 4 9 6 10 8

3 10 8 2 5 4 7 1 6 9
5 2 3 1 7 4 10 8 6 9

8 6 7 9 4 1 3 10 2 5
8 2 7 6 9 1 5 3 10 4

3 9 10 4 1 8 6 7 5 2
2 9 8 5 1 7 3 4 6 10

1 2 3 4 5 6 7 8 9 10
1 2 3 4 5 6 7 8 9 10

Expect:
9 4 5 7 0
'''

def split_pair(pair):
    p1, p2 = [list(map(int, x.split(' '))) for x in pair]
    return p1, p2

def break_point(permutation):
    bp = []
    for i in range(1, len(permutation)):
        if abs(permutation[i] - permutation[i-1]) > 1:
            bp.append(i)
    return bp

def reversal_distance(perm1, perm2):
    if perm1 == perm2:
        return (0)

    p_star = [0] + [perm1.index(x) + 1 for x in perm2] + [len(perm1) + 1]
    perm_list = [p_star]
    bp_min = len(break_point(p_star))

    count = 0
    while count < len(p_star)+1:
        count += 1
        new_perm_list = []

        for perm in perm_list:
            bp = break_point(perm)
            for i in range(len(bp)):
                for j in range(i+1, len(bp)):
                    a = bp[i]
                    b = bp[j]
                    if b - a > 1:
                        new_perm = perm[:a] + perm[a:b][::-1] + perm[b:]
                        new_bp = len(break_point(new_perm))
                        if new_bp == 0:
                            return count
                        elif new_bp < bp_min:
                            bp_min = new_bp
                            new_perm_list = [new_perm]
                        elif new_bp == bp_min:
                            new_perm_list.append(new_perm)
        perm_list = new_perm_list


def main():
    with open('rosalind_rear.txt') as f:
        permutations = [x.split('\n') for x in f.read().strip().split('\n\n')]
        permutations = [split_pair(pair) for pair in permutations]
    counts = [min(reversal_distance(pair[0], pair[1]), reversal_distance(pair[1], pair[0]))
              for pair in permutations]
    for i in counts:
        print(i, end=' ')

if __name__ == '__main__':
    main()
