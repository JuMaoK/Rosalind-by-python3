'''
Title: Independent Segregation of Chromosomes
URL: http://rosalind.info/problems/indc/

Given: A positive integer nâ‰¤50.

Return: An array A of length 2n in which A[k] represents the
common logarithm of the probability that two diploid siblings
share at least k of their 2n chromosomes (we do not consider
recombination for now).
'''

import math

def range_prod(lo, hi):
    if lo + 1 < hi:
        mid = (lo+hi)//2
        return range_prod(lo, mid) * range_prod(mid+1, hi)
    if lo == hi:
        return lo
    return lo * hi

def factorial_bignumber(n):
    if n < 2:
        return 1
    else: return range_prod(1, n)

def nCr(n, r):
    return factorial_bignumber(n) // (factorial_bignumber(r) * factorial_bignumber(n-r))

n = 5


for k in range(1, 2*n+1):
    p = sum([nCr(2*n, i) * (0.5**i) * (0.5**(2*n-i)) for i in range(k, 2*n+1)])
    print('%.3f' % math.log10(p), end=' ')
