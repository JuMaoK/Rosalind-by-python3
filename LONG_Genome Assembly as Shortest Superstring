'''
Title: Genome Assembly as Shortest Superstring
URL: http://rosalind.info/problems/long/

Given: At most 50 DNA strings of approximately equal length, not exceeding 1 kbp,
 in FASTA format (which represent reads deriving from the same strand of a single linear chromosome).
Return: A shortest superstring containing all the given strings (thus correspon
ding to a reconstructed chromosome).
'''

with open(r'/Users/lancet/Downloads/rosalind_long-2.txt') as f:
    read_data = f.read().split('>')[1:]
reads = [(i.replace('\n', '')[13:]) for i in read_data]
half = len(reads[0])//2

def gluc(ss, match, i):
    # overlap occur at first half of ss
    if ss[:half] in match:
        for j in range(21,len(ss)):
            if ss[:j].endswith(match[-20:]):
                ss = match + ss[j:]
                reads.remove(match)
                i = 0
                break
        return ss, i
    # overlap occur at second half of ss
    elif ss[-half:] in match:
        for k in range(21, len(match)):
            if match[:k].endswith(ss[-20:]):
                ss = ss + match[k:]
                reads.remove(match)
                i = 0
                break
        return ss, i
    else:
        # i is used for loop control
        i += 1
        return ss, i

# initilize some parameters
ss = reads[0]
reads.remove(ss)
i = 0

while len(reads) > 0:
    ss, i = gluc(ss, reads[i], i)
    while i != 0:
        ss, i = gluc(ss, reads[i], i)
print(ss)
